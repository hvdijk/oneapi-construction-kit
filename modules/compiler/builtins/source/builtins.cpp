// Copyright (C) Codeplay Software Limited
//
// Licensed under the Apache License, Version 2.0 (the "License") with LLVM
// Exceptions; you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://github.com/uxlfoundation/oneapi-construction-kit/blob/main/LICENSE.txt
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations
// under the License.
//
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
// WARNING: This file is generated by a script, do not edit it directly. Instead
// changes should be made to the generate_header.sh script in builtins/scripts.

#include <builtins/builtins.h>
#include <builtins/cxxbuiltins.h>
#ifdef __cplusplus
extern "C" {
#endif

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

float __CL_CONST_ATTRIBUTES convert_half_to_float(ushort arg) {
  return ocl::half_convert<ocl::Rounding::undefined, float>(arg);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double __CL_CONST_ATTRIBUTES convert_half_to_double(ushort arg) {
  return ocl::half_convert<ocl::Rounding::undefined, double>(arg);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort __CL_CONST_ATTRIBUTES convert_float_to_half(float arg) {
  return ocl::half_convert<ocl::Rounding::undefined, ushort>(arg);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort __CL_CONST_ATTRIBUTES convert_double_to_half(double arg) {
  return ocl::half_convert<ocl::Rounding::undefined, ushort>(arg);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort __CL_CONST_ATTRIBUTES convert_float_to_half_rte(float arg) {
  return ocl::half_convert<ocl::Rounding::rte, ushort>(arg);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort __CL_CONST_ATTRIBUTES convert_double_to_half_rte(double arg) {
  return ocl::half_convert<ocl::Rounding::rte, ushort>(arg);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort __CL_CONST_ATTRIBUTES convert_float_to_half_rtz(float arg) {
  return ocl::half_convert<ocl::Rounding::rtz, ushort>(arg);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort __CL_CONST_ATTRIBUTES convert_double_to_half_rtz(double arg) {
  return ocl::half_convert<ocl::Rounding::rtz, ushort>(arg);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort __CL_CONST_ATTRIBUTES convert_float_to_half_rtn(float arg) {
  return ocl::half_convert<ocl::Rounding::rtn, ushort>(arg);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort __CL_CONST_ATTRIBUTES convert_double_to_half_rtn(double arg) {
  return ocl::half_convert<ocl::Rounding::rtn, ushort>(arg);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort __CL_CONST_ATTRIBUTES convert_float_to_half_rtp(float arg) {
  return ocl::half_convert<ocl::Rounding::rtp, ushort>(arg);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort __CL_CONST_ATTRIBUTES convert_double_to_half_rtp(double arg) {
  return ocl::half_convert<ocl::Rounding::rtp, ushort>(arg);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
float2 __CL_CONST_ATTRIBUTES convert_half2_to_float2(ushort2 arg) {
  return ocl::half_convert<ocl::Rounding::undefined, float2>(arg);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double2 __CL_CONST_ATTRIBUTES convert_half2_to_double2(ushort2 arg) {
  return ocl::half_convert<ocl::Rounding::undefined, double2>(arg);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort2 __CL_CONST_ATTRIBUTES convert_float2_to_half2(float2 arg) {
  return ocl::half_convert<ocl::Rounding::undefined, ushort2>(arg);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort2 __CL_CONST_ATTRIBUTES convert_double2_to_half2(double2 arg) {
  return ocl::half_convert<ocl::Rounding::undefined, ushort2>(arg);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort2 __CL_CONST_ATTRIBUTES convert_float2_to_half2_rte(float2 arg) {
  return ocl::half_convert<ocl::Rounding::rte, ushort2>(arg);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort2 __CL_CONST_ATTRIBUTES convert_double2_to_half2_rte(double2 arg) {
  return ocl::half_convert<ocl::Rounding::rte, ushort2>(arg);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort2 __CL_CONST_ATTRIBUTES convert_float2_to_half2_rtz(float2 arg) {
  return ocl::half_convert<ocl::Rounding::rtz, ushort2>(arg);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort2 __CL_CONST_ATTRIBUTES convert_double2_to_half2_rtz(double2 arg) {
  return ocl::half_convert<ocl::Rounding::rtz, ushort2>(arg);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort2 __CL_CONST_ATTRIBUTES convert_float2_to_half2_rtn(float2 arg) {
  return ocl::half_convert<ocl::Rounding::rtn, ushort2>(arg);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort2 __CL_CONST_ATTRIBUTES convert_double2_to_half2_rtn(double2 arg) {
  return ocl::half_convert<ocl::Rounding::rtn, ushort2>(arg);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort2 __CL_CONST_ATTRIBUTES convert_float2_to_half2_rtp(float2 arg) {
  return ocl::half_convert<ocl::Rounding::rtp, ushort2>(arg);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort2 __CL_CONST_ATTRIBUTES convert_double2_to_half2_rtp(double2 arg) {
  return ocl::half_convert<ocl::Rounding::rtp, ushort2>(arg);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
float3 __CL_CONST_ATTRIBUTES convert_half3_to_float3(ushort3 arg) {
  return ocl::half_convert<ocl::Rounding::undefined, float3>(arg);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double3 __CL_CONST_ATTRIBUTES convert_half3_to_double3(ushort3 arg) {
  return ocl::half_convert<ocl::Rounding::undefined, double3>(arg);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort3 __CL_CONST_ATTRIBUTES convert_float3_to_half3(float3 arg) {
  return ocl::half_convert<ocl::Rounding::undefined, ushort3>(arg);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort3 __CL_CONST_ATTRIBUTES convert_double3_to_half3(double3 arg) {
  return ocl::half_convert<ocl::Rounding::undefined, ushort3>(arg);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort3 __CL_CONST_ATTRIBUTES convert_float3_to_half3_rte(float3 arg) {
  return ocl::half_convert<ocl::Rounding::rte, ushort3>(arg);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort3 __CL_CONST_ATTRIBUTES convert_double3_to_half3_rte(double3 arg) {
  return ocl::half_convert<ocl::Rounding::rte, ushort3>(arg);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort3 __CL_CONST_ATTRIBUTES convert_float3_to_half3_rtz(float3 arg) {
  return ocl::half_convert<ocl::Rounding::rtz, ushort3>(arg);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort3 __CL_CONST_ATTRIBUTES convert_double3_to_half3_rtz(double3 arg) {
  return ocl::half_convert<ocl::Rounding::rtz, ushort3>(arg);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort3 __CL_CONST_ATTRIBUTES convert_float3_to_half3_rtn(float3 arg) {
  return ocl::half_convert<ocl::Rounding::rtn, ushort3>(arg);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort3 __CL_CONST_ATTRIBUTES convert_double3_to_half3_rtn(double3 arg) {
  return ocl::half_convert<ocl::Rounding::rtn, ushort3>(arg);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort3 __CL_CONST_ATTRIBUTES convert_float3_to_half3_rtp(float3 arg) {
  return ocl::half_convert<ocl::Rounding::rtp, ushort3>(arg);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort3 __CL_CONST_ATTRIBUTES convert_double3_to_half3_rtp(double3 arg) {
  return ocl::half_convert<ocl::Rounding::rtp, ushort3>(arg);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
float4 __CL_CONST_ATTRIBUTES convert_half4_to_float4(ushort4 arg) {
  return ocl::half_convert<ocl::Rounding::undefined, float4>(arg);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double4 __CL_CONST_ATTRIBUTES convert_half4_to_double4(ushort4 arg) {
  return ocl::half_convert<ocl::Rounding::undefined, double4>(arg);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort4 __CL_CONST_ATTRIBUTES convert_float4_to_half4(float4 arg) {
  return ocl::half_convert<ocl::Rounding::undefined, ushort4>(arg);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort4 __CL_CONST_ATTRIBUTES convert_double4_to_half4(double4 arg) {
  return ocl::half_convert<ocl::Rounding::undefined, ushort4>(arg);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort4 __CL_CONST_ATTRIBUTES convert_float4_to_half4_rte(float4 arg) {
  return ocl::half_convert<ocl::Rounding::rte, ushort4>(arg);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort4 __CL_CONST_ATTRIBUTES convert_double4_to_half4_rte(double4 arg) {
  return ocl::half_convert<ocl::Rounding::rte, ushort4>(arg);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort4 __CL_CONST_ATTRIBUTES convert_float4_to_half4_rtz(float4 arg) {
  return ocl::half_convert<ocl::Rounding::rtz, ushort4>(arg);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort4 __CL_CONST_ATTRIBUTES convert_double4_to_half4_rtz(double4 arg) {
  return ocl::half_convert<ocl::Rounding::rtz, ushort4>(arg);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort4 __CL_CONST_ATTRIBUTES convert_float4_to_half4_rtn(float4 arg) {
  return ocl::half_convert<ocl::Rounding::rtn, ushort4>(arg);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort4 __CL_CONST_ATTRIBUTES convert_double4_to_half4_rtn(double4 arg) {
  return ocl::half_convert<ocl::Rounding::rtn, ushort4>(arg);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort4 __CL_CONST_ATTRIBUTES convert_float4_to_half4_rtp(float4 arg) {
  return ocl::half_convert<ocl::Rounding::rtp, ushort4>(arg);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort4 __CL_CONST_ATTRIBUTES convert_double4_to_half4_rtp(double4 arg) {
  return ocl::half_convert<ocl::Rounding::rtp, ushort4>(arg);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
float8 __CL_CONST_ATTRIBUTES convert_half8_to_float8(ushort8 arg) {
  return ocl::half_convert<ocl::Rounding::undefined, float8>(arg);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double8 __CL_CONST_ATTRIBUTES convert_half8_to_double8(ushort8 arg) {
  return ocl::half_convert<ocl::Rounding::undefined, double8>(arg);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort8 __CL_CONST_ATTRIBUTES convert_float8_to_half8(float8 arg) {
  return ocl::half_convert<ocl::Rounding::undefined, ushort8>(arg);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort8 __CL_CONST_ATTRIBUTES convert_double8_to_half8(double8 arg) {
  return ocl::half_convert<ocl::Rounding::undefined, ushort8>(arg);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort8 __CL_CONST_ATTRIBUTES convert_float8_to_half8_rte(float8 arg) {
  return ocl::half_convert<ocl::Rounding::rte, ushort8>(arg);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort8 __CL_CONST_ATTRIBUTES convert_double8_to_half8_rte(double8 arg) {
  return ocl::half_convert<ocl::Rounding::rte, ushort8>(arg);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort8 __CL_CONST_ATTRIBUTES convert_float8_to_half8_rtz(float8 arg) {
  return ocl::half_convert<ocl::Rounding::rtz, ushort8>(arg);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort8 __CL_CONST_ATTRIBUTES convert_double8_to_half8_rtz(double8 arg) {
  return ocl::half_convert<ocl::Rounding::rtz, ushort8>(arg);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort8 __CL_CONST_ATTRIBUTES convert_float8_to_half8_rtn(float8 arg) {
  return ocl::half_convert<ocl::Rounding::rtn, ushort8>(arg);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort8 __CL_CONST_ATTRIBUTES convert_double8_to_half8_rtn(double8 arg) {
  return ocl::half_convert<ocl::Rounding::rtn, ushort8>(arg);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort8 __CL_CONST_ATTRIBUTES convert_float8_to_half8_rtp(float8 arg) {
  return ocl::half_convert<ocl::Rounding::rtp, ushort8>(arg);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort8 __CL_CONST_ATTRIBUTES convert_double8_to_half8_rtp(double8 arg) {
  return ocl::half_convert<ocl::Rounding::rtp, ushort8>(arg);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
float16 __CL_CONST_ATTRIBUTES convert_half16_to_float16(ushort16 arg) {
  return ocl::half_convert<ocl::Rounding::undefined, float16>(arg);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double16 __CL_CONST_ATTRIBUTES convert_half16_to_double16(ushort16 arg) {
  return ocl::half_convert<ocl::Rounding::undefined, double16>(arg);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort16 __CL_CONST_ATTRIBUTES convert_float16_to_half16(float16 arg) {
  return ocl::half_convert<ocl::Rounding::undefined, ushort16>(arg);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort16 __CL_CONST_ATTRIBUTES convert_double16_to_half16(double16 arg) {
  return ocl::half_convert<ocl::Rounding::undefined, ushort16>(arg);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort16 __CL_CONST_ATTRIBUTES convert_float16_to_half16_rte(float16 arg) {
  return ocl::half_convert<ocl::Rounding::rte, ushort16>(arg);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort16 __CL_CONST_ATTRIBUTES convert_double16_to_half16_rte(double16 arg) {
  return ocl::half_convert<ocl::Rounding::rte, ushort16>(arg);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort16 __CL_CONST_ATTRIBUTES convert_float16_to_half16_rtz(float16 arg) {
  return ocl::half_convert<ocl::Rounding::rtz, ushort16>(arg);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort16 __CL_CONST_ATTRIBUTES convert_double16_to_half16_rtz(double16 arg) {
  return ocl::half_convert<ocl::Rounding::rtz, ushort16>(arg);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort16 __CL_CONST_ATTRIBUTES convert_float16_to_half16_rtn(float16 arg) {
  return ocl::half_convert<ocl::Rounding::rtn, ushort16>(arg);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort16 __CL_CONST_ATTRIBUTES convert_double16_to_half16_rtn(double16 arg) {
  return ocl::half_convert<ocl::Rounding::rtn, ushort16>(arg);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort16 __CL_CONST_ATTRIBUTES convert_float16_to_half16_rtp(float16 arg) {
  return ocl::half_convert<ocl::Rounding::rtp, ushort16>(arg);
}
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort16 __CL_CONST_ATTRIBUTES convert_double16_to_half16_rtp(double16 arg) {
  return ocl::half_convert<ocl::Rounding::rtp, ushort16>(arg);
}
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
float __CL_CONST_ATTRIBUTES quantizeToF16(float x) {
  return ocl::quantizeToF16<float>(x);
}
float2 __CL_CONST_ATTRIBUTES quantizeToF16(float2 x) {
  return ocl::quantizeToF16<float2>(x);
}
float3 __CL_CONST_ATTRIBUTES quantizeToF16(float3 x) {
  return ocl::quantizeToF16<float3>(x);
}
float4 __CL_CONST_ATTRIBUTES quantizeToF16(float4 x) {
  return ocl::quantizeToF16<float4>(x);
}

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

int __CL_BUILTIN_ATTRIBUTES atomic_dec(volatile int global *p);
int __CL_BUILTIN_ATTRIBUTES atomic_inc(volatile int global *p);
int __CL_BUILTIN_ATTRIBUTES atom_dec(volatile int global *p);
int __CL_BUILTIN_ATTRIBUTES atom_inc(volatile int global *p);
int __CL_BUILTIN_ATTRIBUTES atomic_dec(volatile int local *p);
int __CL_BUILTIN_ATTRIBUTES atomic_inc(volatile int local *p);
int __CL_BUILTIN_ATTRIBUTES atom_dec(volatile int local *p);
int __CL_BUILTIN_ATTRIBUTES atom_inc(volatile int local *p);
long __CL_BUILTIN_ATTRIBUTES atom_dec(volatile long global *p);
long __CL_BUILTIN_ATTRIBUTES atom_inc(volatile long global *p);
long __CL_BUILTIN_ATTRIBUTES atom_dec(volatile long local *p);
long __CL_BUILTIN_ATTRIBUTES atom_inc(volatile long local *p);
uint __CL_BUILTIN_ATTRIBUTES atomic_dec(volatile uint global *p);
uint __CL_BUILTIN_ATTRIBUTES atomic_inc(volatile uint global *p);
uint __CL_BUILTIN_ATTRIBUTES atom_dec(volatile uint global *p);
uint __CL_BUILTIN_ATTRIBUTES atom_inc(volatile uint global *p);
uint __CL_BUILTIN_ATTRIBUTES atomic_dec(volatile uint local *p);
uint __CL_BUILTIN_ATTRIBUTES atomic_inc(volatile uint local *p);
uint __CL_BUILTIN_ATTRIBUTES atom_dec(volatile uint local *p);
uint __CL_BUILTIN_ATTRIBUTES atom_inc(volatile uint local *p);
ulong __CL_BUILTIN_ATTRIBUTES atom_dec(volatile ulong global *p);
ulong __CL_BUILTIN_ATTRIBUTES atom_inc(volatile ulong global *p);
ulong __CL_BUILTIN_ATTRIBUTES atom_dec(volatile ulong local *p);
ulong __CL_BUILTIN_ATTRIBUTES atom_inc(volatile ulong local *p);
int __CL_BUILTIN_ATTRIBUTES atomic_add(volatile int global *p, int val);
int __CL_BUILTIN_ATTRIBUTES atomic_sub(volatile int global *p, int val);
int __CL_BUILTIN_ATTRIBUTES atomic_xchg(volatile int global *p, int val);
int __CL_BUILTIN_ATTRIBUTES atomic_min(volatile int global *p, int val);
int __CL_BUILTIN_ATTRIBUTES atomic_max(volatile int global *p, int val);
int __CL_BUILTIN_ATTRIBUTES atomic_and(volatile int global *p, int val);
int __CL_BUILTIN_ATTRIBUTES atomic_or(volatile int global *p, int val);
int __CL_BUILTIN_ATTRIBUTES atomic_xor(volatile int global *p, int val);
int __CL_BUILTIN_ATTRIBUTES atom_add(volatile int global *p, int val);
int __CL_BUILTIN_ATTRIBUTES atom_sub(volatile int global *p, int val);
int __CL_BUILTIN_ATTRIBUTES atom_xchg(volatile int global *p, int val);
int __CL_BUILTIN_ATTRIBUTES atom_min(volatile int global *p, int val);
int __CL_BUILTIN_ATTRIBUTES atom_max(volatile int global *p, int val);
int __CL_BUILTIN_ATTRIBUTES atom_and(volatile int global *p, int val);
int __CL_BUILTIN_ATTRIBUTES atom_or(volatile int global *p, int val);
int __CL_BUILTIN_ATTRIBUTES atom_xor(volatile int global *p, int val);
int __CL_BUILTIN_ATTRIBUTES atomic_add(volatile int local *p, int val);
int __CL_BUILTIN_ATTRIBUTES atomic_sub(volatile int local *p, int val);
int __CL_BUILTIN_ATTRIBUTES atomic_xchg(volatile int local *p, int val);
int __CL_BUILTIN_ATTRIBUTES atomic_min(volatile int local *p, int val);
int __CL_BUILTIN_ATTRIBUTES atomic_max(volatile int local *p, int val);
int __CL_BUILTIN_ATTRIBUTES atomic_and(volatile int local *p, int val);
int __CL_BUILTIN_ATTRIBUTES atomic_or(volatile int local *p, int val);
int __CL_BUILTIN_ATTRIBUTES atomic_xor(volatile int local *p, int val);
int __CL_BUILTIN_ATTRIBUTES atom_add(volatile int local *p, int val);
int __CL_BUILTIN_ATTRIBUTES atom_sub(volatile int local *p, int val);
int __CL_BUILTIN_ATTRIBUTES atom_xchg(volatile int local *p, int val);
int __CL_BUILTIN_ATTRIBUTES atom_min(volatile int local *p, int val);
int __CL_BUILTIN_ATTRIBUTES atom_max(volatile int local *p, int val);
int __CL_BUILTIN_ATTRIBUTES atom_and(volatile int local *p, int val);
int __CL_BUILTIN_ATTRIBUTES atom_or(volatile int local *p, int val);
int __CL_BUILTIN_ATTRIBUTES atom_xor(volatile int local *p, int val);
long __CL_BUILTIN_ATTRIBUTES atom_add(volatile long global *p, long val);
long __CL_BUILTIN_ATTRIBUTES atom_sub(volatile long global *p, long val);
long __CL_BUILTIN_ATTRIBUTES atom_xchg(volatile long global *p, long val);
long __CL_BUILTIN_ATTRIBUTES atom_min(volatile long global *p, long val);
long __CL_BUILTIN_ATTRIBUTES atom_max(volatile long global *p, long val);
long __CL_BUILTIN_ATTRIBUTES atom_and(volatile long global *p, long val);
long __CL_BUILTIN_ATTRIBUTES atom_or(volatile long global *p, long val);
long __CL_BUILTIN_ATTRIBUTES atom_xor(volatile long global *p, long val);
long __CL_BUILTIN_ATTRIBUTES atom_add(volatile long local *p, long val);
long __CL_BUILTIN_ATTRIBUTES atom_sub(volatile long local *p, long val);
long __CL_BUILTIN_ATTRIBUTES atom_xchg(volatile long local *p, long val);
long __CL_BUILTIN_ATTRIBUTES atom_min(volatile long local *p, long val);
long __CL_BUILTIN_ATTRIBUTES atom_max(volatile long local *p, long val);
long __CL_BUILTIN_ATTRIBUTES atom_and(volatile long local *p, long val);
long __CL_BUILTIN_ATTRIBUTES atom_or(volatile long local *p, long val);
long __CL_BUILTIN_ATTRIBUTES atom_xor(volatile long local *p, long val);
uint __CL_BUILTIN_ATTRIBUTES atomic_add(volatile uint global *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atomic_sub(volatile uint global *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atomic_xchg(volatile uint global *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atomic_min(volatile uint global *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atomic_max(volatile uint global *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atomic_and(volatile uint global *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atomic_or(volatile uint global *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atomic_xor(volatile uint global *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atom_add(volatile uint global *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atom_sub(volatile uint global *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atom_xchg(volatile uint global *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atom_min(volatile uint global *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atom_max(volatile uint global *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atom_and(volatile uint global *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atom_or(volatile uint global *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atom_xor(volatile uint global *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atomic_add(volatile uint local *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atomic_sub(volatile uint local *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atomic_xchg(volatile uint local *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atomic_min(volatile uint local *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atomic_max(volatile uint local *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atomic_and(volatile uint local *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atomic_or(volatile uint local *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atomic_xor(volatile uint local *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atom_add(volatile uint local *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atom_sub(volatile uint local *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atom_xchg(volatile uint local *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atom_min(volatile uint local *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atom_max(volatile uint local *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atom_and(volatile uint local *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atom_or(volatile uint local *p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atom_xor(volatile uint local *p, uint val);
ulong __CL_BUILTIN_ATTRIBUTES atom_add(volatile ulong global *p, ulong val);
ulong __CL_BUILTIN_ATTRIBUTES atom_sub(volatile ulong global *p, ulong val);
ulong __CL_BUILTIN_ATTRIBUTES atom_xchg(volatile ulong global *p, ulong val);
ulong __CL_BUILTIN_ATTRIBUTES atom_min(volatile ulong global *p, ulong val);
ulong __CL_BUILTIN_ATTRIBUTES atom_max(volatile ulong global *p, ulong val);
ulong __CL_BUILTIN_ATTRIBUTES atom_and(volatile ulong global *p, ulong val);
ulong __CL_BUILTIN_ATTRIBUTES atom_or(volatile ulong global *p, ulong val);
ulong __CL_BUILTIN_ATTRIBUTES atom_xor(volatile ulong global *p, ulong val);
ulong __CL_BUILTIN_ATTRIBUTES atom_add(volatile ulong local *p, ulong val);
ulong __CL_BUILTIN_ATTRIBUTES atom_sub(volatile ulong local *p, ulong val);
ulong __CL_BUILTIN_ATTRIBUTES atom_xchg(volatile ulong local *p, ulong val);
ulong __CL_BUILTIN_ATTRIBUTES atom_min(volatile ulong local *p, ulong val);
ulong __CL_BUILTIN_ATTRIBUTES atom_max(volatile ulong local *p, ulong val);
ulong __CL_BUILTIN_ATTRIBUTES atom_and(volatile ulong local *p, ulong val);
ulong __CL_BUILTIN_ATTRIBUTES atom_or(volatile ulong local *p, ulong val);
ulong __CL_BUILTIN_ATTRIBUTES atom_xor(volatile ulong local *p, ulong val);
float __CL_BUILTIN_ATTRIBUTES atomic_xchg(volatile float global *p, float val);
float __CL_BUILTIN_ATTRIBUTES atom_xchg(volatile float global *p, float val);
float __CL_BUILTIN_ATTRIBUTES atomic_xchg(volatile float local *p, float val);
float __CL_BUILTIN_ATTRIBUTES atom_xchg(volatile float local *p, float val);
int __CL_BUILTIN_ATTRIBUTES atomic_cmpxchg(volatile int global *p, int cmp,
                                           int val);
int __CL_BUILTIN_ATTRIBUTES atom_cmpxchg(volatile int global *p, int cmp,
                                         int val);
int __CL_BUILTIN_ATTRIBUTES atomic_cmpxchg(volatile int local *p, int cmp,
                                           int val);
int __CL_BUILTIN_ATTRIBUTES atom_cmpxchg(volatile int local *p, int cmp,
                                         int val);
long __CL_BUILTIN_ATTRIBUTES atom_cmpxchg(volatile long global *p, long cmp,
                                          long val);
long __CL_BUILTIN_ATTRIBUTES atom_cmpxchg(volatile long local *p, long cmp,
                                          long val);
uint __CL_BUILTIN_ATTRIBUTES atomic_cmpxchg(volatile uint global *p, uint cmp,
                                            uint val);
uint __CL_BUILTIN_ATTRIBUTES atom_cmpxchg(volatile uint global *p, uint cmp,
                                          uint val);
uint __CL_BUILTIN_ATTRIBUTES atomic_cmpxchg(volatile uint local *p, uint cmp,
                                            uint val);
uint __CL_BUILTIN_ATTRIBUTES atom_cmpxchg(volatile uint local *p, uint cmp,
                                          uint val);
ulong __CL_BUILTIN_ATTRIBUTES atom_cmpxchg(volatile ulong global *p, ulong cmp,
                                           ulong val);
ulong __CL_BUILTIN_ATTRIBUTES atom_cmpxchg(volatile ulong local *p, ulong cmp,
                                           ulong val);

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

// Much like other parts of this file we exploit the fact that we
// know we are compiling with Clang and choose builtins that will
// map directly to LLVM IR. These fences will affect the compiler
// only, they should not result any extra instructions being
// generated as they map to an LLVM IR fence instruction with
// syncscope("singlethread").  __c11_atomic_thread_fence could be
// used instead, that would likely require extra instructions to be
// generated to implement the fence, and to some extent makes sense.
// However, it does not really match OpenCL semantics, e.g. it would
// synchronize the whole system not just a work-group and can not
// differentiate between local and global memory.  As the fence
// property of barriers is implemented as a compiler pass, if the
// scope of fences change here they should also change within that
// pass (PassReplaceBarriers in the OpenCL runtime).
void __CL_BARRIER_ATTRIBUTES
barrier(cl_mem_fence_flags flags) /* See generate_header.sh */;
void __CL_BUILTIN_ATTRIBUTES mem_fence(cl_mem_fence_flags flags
                                       __attribute__((unused))) {
  __c11_atomic_signal_fence(__ATOMIC_ACQ_REL);
}
void __CL_BUILTIN_ATTRIBUTES read_mem_fence(cl_mem_fence_flags flags
                                            __attribute__((unused))) {
  __c11_atomic_signal_fence(__ATOMIC_ACQUIRE);
}
void __CL_BUILTIN_ATTRIBUTES write_mem_fence(cl_mem_fence_flags flags
                                             __attribute__((unused))) {
  __c11_atomic_signal_fence(__ATOMIC_RELEASE);
}

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

size_t __CL_WORK_ITEM_ATTRIBUTES get_global_size(uint x);
size_t __CL_WORK_ITEM_ATTRIBUTES get_global_id(uint x);
size_t __CL_WORK_ITEM_ATTRIBUTES get_local_size(uint x);
size_t __CL_WORK_ITEM_ATTRIBUTES get_local_id(uint x);
size_t __CL_WORK_ITEM_ATTRIBUTES get_num_groups(uint x);
size_t __CL_WORK_ITEM_ATTRIBUTES get_group_id(uint x);
size_t __CL_WORK_ITEM_ATTRIBUTES get_global_offset(uint x);
uint __CL_WORK_ITEM_ATTRIBUTES get_work_dim(void);

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

#ifndef __cplusplus
#ifdef __CA_BUILTINS_HALF_SUPPORT
#endif  // __CA_BUILTINS_HALF_SUPPORT
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
#endif  // __CA_BUILTINS_HALF_SUPPORT
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#endif  //__cplusplus
void __CL_BUILTIN_ATTRIBUTES prefetch(const global char *pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global char2 *pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global char3 *pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global char4 *pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global char8 *pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global char16 *pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global short *pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global short2 *pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global short3 *pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global short4 *pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global short8 *pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global short16 *pointer,
                                      size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global int *pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global int2 *pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global int3 *pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global int4 *pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global int8 *pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global int16 *pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global long *pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global long2 *pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global long3 *pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global long4 *pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global long8 *pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global long16 *pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global uchar *pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global uchar2 *pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global uchar3 *pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global uchar4 *pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global uchar8 *pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global uchar16 *pointer,
                                      size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global ushort *pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global ushort2 *pointer,
                                      size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global ushort3 *pointer,
                                      size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global ushort4 *pointer,
                                      size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global ushort8 *pointer,
                                      size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global ushort16 *pointer,
                                      size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global uint *pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global uint2 *pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global uint3 *pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global uint4 *pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global uint8 *pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global uint16 *pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global ulong *pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global ulong2 *pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global ulong3 *pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global ulong4 *pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global ulong8 *pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global ulong16 *pointer,
                                      size_t num);
#ifdef __CA_BUILTINS_HALF_SUPPORT
void __CL_BUILTIN_ATTRIBUTES prefetch(const global half *pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global half2 *pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global half3 *pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global half4 *pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global half8 *pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global half16 *pointer, size_t num);
#endif  // __CA_BUILTINS_HALF_SUPPORT
void __CL_BUILTIN_ATTRIBUTES prefetch(const global float *pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global float2 *pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global float3 *pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global float4 *pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global float8 *pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global float16 *pointer,
                                      size_t num);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
void __CL_BUILTIN_ATTRIBUTES prefetch(const global double *pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global double2 *pointer,
                                      size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global double3 *pointer,
                                      size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global double4 *pointer,
                                      size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global double8 *pointer,
                                      size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global double16 *pointer,
                                      size_t num);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

int __attribute__((weak)) printf(const constant char *const restrict fmt, ...);

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

void *memcpy(void *__restrict dst, const void *__restrict src, size_t num) {
  auto *d = static_cast<unsigned char *>(dst);
  auto *s = static_cast<const unsigned char *>(src);
  while (num--) {
    *(d++) = *(s++);
  }
  return dst;
}

void *memmove(void *dst, const void *src, size_t num) {
  if (reinterpret_cast<uintptr_t>(static_cast<char *>(dst) + num) <=
          reinterpret_cast<uintptr_t>(src) ||
      reinterpret_cast<uintptr_t>(static_cast<const char *>(src) + num) <=
          reinterpret_cast<uintptr_t>(dst)) {
    return memcpy(dst, src, num);
  }
  if (reinterpret_cast<uintptr_t>(dst) < reinterpret_cast<uintptr_t>(src)) {
    auto *d = static_cast<unsigned char *>(dst);
    auto *s = static_cast<const unsigned char *>(src);
    while (num--) {
      *(d++) = *(s++);
    }
  }
  if (reinterpret_cast<uintptr_t>(src) < reinterpret_cast<uintptr_t>(dst)) {
    auto *d = static_cast<unsigned char *>(dst) + num;
    auto *s = static_cast<const unsigned char *>(src) + num;
    while (num--) {
      *(--d) = *(--s);
    }
  }
  return dst;
}

void *memset(void *ptr, int value, size_t num) {
  unsigned char *dst = static_cast<unsigned char *>(ptr);
  while (num--) {
    *(dst++) = (unsigned char)value;
  }
  return ptr;
}

#ifdef __cplusplus
};
#endif

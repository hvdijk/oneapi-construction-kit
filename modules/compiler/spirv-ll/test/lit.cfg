# Copyright (C) Codeplay Software Limited
#
# Licensed under the Apache License, Version 2.0 (the "License") with LLVM
# Exceptions; you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://github.com/codeplaysoftware/oneapi-construction-kit/blob/main/LICENSE.txt
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
"""Python configuration file for lit."""

import os
import re
import lit.formats
import lit.util
from lit.llvm import llvm_config
from lit.llvm.subst import ToolSubst
from subprocess import check_output

# Import the utils module
sys.path.insert(0, '@CA_COMMON_LIT_BINARY_PATH@')
import utils.tool_config

# Name of the test suite.
config.name = 'spirv-ll-tool lit test suite'

# The test format used to interpret tests.
config.test_format = lit.formats.ShTest(execute_external=False)

# The root path where tests are located.
config.test_source_root = os.path.dirname(__file__)

# We might be running from an installed build dir
if not os.path.exists(config.test_exec_root):
    config.test_exec_root = config.test_source_root

# Import the spvlltest module, relative to this file.
sys.path.insert(0, os.path.dirname(__file__))

import helpers.spvlltest

# Use our custom format to provide the %spv_file_s substitution.
config.test_format = helpers.spvlltest.SpvllTestFormat(execute_external=False)

if (config.explicitly_online_offline == True
    or (not config.offline and config.explicitly_online_offline is None)):
    # If we're not in offline mode and have been explicitly not told to be in
    # online mode, add the features that will enable the various online
    # compilation steps.
    extra_tools = [
        ToolSubst('spirv-as', unresolved='ignore'),
        ToolSubst('spirv-val', unresolved='ignore'),
    ]

    utils.tool_config.add_ca_tool_substitutions(config, lit_config, llvm_config, extra_tools)

    if not extra_tools[0].was_resolved:
        config.available_features.add('no-spvasm')
        lit_config.note("Skipping spvasm tests: in online mode but SPVASM wasn't found at run time")
    else:
        config.available_features.add('online-spirv-as')

        # Try and find the version of spirv-as we'll be using.
        idx = utils.tool_config.last_substitution_by_key(config.substitutions, extra_tools[0].regex)
        if idx >= 0:
            subst_path = config.substitutions[idx][1]
            output = str(check_output([subst_path, '--version']))

            m = re.search(r'SPIRV-Tools v(20\d{2,})\.(\d+)(-dev)?', output)
            if m:
                config.spirv_as_version_year = int(m.group(1))
                config.spirv_as_version_point = int(m.group(2))
                if m.group(3):
                    # If decrementing the point would result in a negative
                    # point release, decrement the year instead, and set the
                    # point at 9.
                    if config.spirv_as_version_point != 0:
                        config.spirv_as_version_point -= 1
                    else:
                        config.spirv_as_version_point = 9
                        config.spirv_as_version_year -= 1

if 'spirv_as_version_year' not in vars(config) or not config.spirv_as_version_year:
    lit_config.note("spirv-as version could not be determined: some tests may be disabled")
else:
    config.available_features.add(f'spirv-as-v{config.spirv_as_version_year}-only')
    # Add all of the previous years maj.point releases. We arbitrarily assume 9
    # as the max point release. We have to include them all as these are LIT
    # features, not actual version strings that can be programatically checked.
    for year in range(2016, config.spirv_as_version_year):
        for point in range(0, 10):
            config.available_features.add(f'spirv-as-v{year}.{point}+')
    # Add all of this year's maj.point releases
    for point in range(0, config.spirv_as_version_point + 1):
        config.available_features.add(f'spirv-as-v{config.spirv_as_version_year}.{point}+')

; Copyright (C) Codeplay Software Limited
;
; Licensed under the Apache License, Version 2.0 (the "License") with LLVM
; Exceptions; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     https://github.com/codeplaysoftware/oneapi-construction-kit/blob/main/LICENSE.txt
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
; WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
; License for the specific language governing permissions and limitations
; under the License.
;
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

; RUN: %if online-spirv-as %{ spirv-as --target-env %spv_tgt_env -o %spv_file_s %s %}
; RUN: %if online-spirv-as %{ spirv-val %spv_file_s %}
; RUN: spirv-ll-tool -a Vulkan -c Float64 -c Int64 %spv_file_s | FileCheck %s
; CHECK: ; ModuleID = '{{.*}}'
               OpCapability Shader
               OpCapability Float64
               OpCapability Int64
               OpMemoryModel Logical GLSL450
               OpEntryPoint GLCompute %main "main"
               OpExecutionMode %main LocalSize 1 1 1
               OpSource GLSL 450
       %file = OpString "modules/spirv-ll-tool/test/spvasm/debug_info.comp"
               OpName %main "main"
               OpName %testfn2 "testfn2"
               OpName %a "a"
               OpName %b "b"
               OpName %c "c"
               OpName %file "file"
       %void = OpTypeVoid
          %3 = OpTypeFunction %void
       %bool = OpTypeBool
%_ptr_Function_bool = OpTypePointer Function %bool
          %9 = OpConstantFalse %bool
        %int = OpTypeInt 32 1
%_ptr_Function_int = OpTypePointer Function %int
         %13 = OpConstant %int 42
               OpLine %file 4 0
       %main = OpFunction %void None %3
; CHECK: define spir_kernel void @main(){{.*}} !dbg [[mainSubprogram:![0-9]+]]
               OpLine %file 5 2
          %5 = OpLabel
               OpLine %file 6 3
          %a = OpVariable %_ptr_Function_bool Function
; CHECK: %a = alloca i1{{(, align [0-9])?}}, !dbg [[aLocation:![0-9]+]]
               OpLine %file 7 3
          %b = OpVariable %_ptr_Function_int Function
; CHECK: %b = alloca i32{{(, align [0-9])?}}, !dbg [[bLocation:![0-9]+]]
               OpLine %file 6 3
               OpStore %a %9
; CHECK: store i1 false, ptr %a{{(, align [0-9])?}}, !dbg [[aLocation]]
               OpLine %file 7 3
               OpStore %b %13
; CHECK: store i32 42, ptr %b{{(, align [0-9])?}}, !dbg [[bLocation]]
               OpLine %file 8 3
         %14 = OpLoad %bool %a
; CHECK: = load i1, ptr %a{{(, align [0-9])?}}, !dbg [[ifConditionLocation:![0-9]+]]
               OpSelectionMerge %16 None
               OpBranchConditional %14 %15 %16
; CHECK: br i1 {{[%@].*}}, label {{[%@].*}}, label {{[%@].*}}, !dbg [[ifConditionLocation]]
         %15 = OpLabel
; CHECK: {{[0-9]+:}}
               OpLine %file 8 3
         %17 = OpLoad %int %b
; CHECK: = load i32, ptr %b{{(, align [0-9])?}}, !dbg [[ifTrueBlockLocation:![0-9]+]]
         %18 = OpIAdd %int %17 %13
; CHECK: = add i32 {{[%@].*}}, 42, !dbg [[ifTrueBlockLocation]]
               OpStore %b %18
; CHECK: store i32 {{[%@].*}}, ptr %b{{(, align [0-9])?}}, !dbg [[ifTrueBlockLocation]]
               OpLine %file 9 5
               OpBranch %16
; CHECK: br label {{[%@].*}}, !dbg [[ifJoinLocation:![0-9]+]]
         %16 = OpLabel
; CHECK: {{[0-9]+:}}
               OpNoLine
               OpReturn
; CHECK: ret void
               OpFunctionEnd
; CHECK: }

    %testfn2 = OpFunction %void None %3
; CHECK: define private spir_func void @testfn2(){{.*}} !dbg [[testfn2Subprogram:![0-9]+]]
               OpLine %file 5 2
         %19 = OpLabel
               OpLine %file 6 3
          %c = OpVariable %_ptr_Function_bool Function
; CHECK: %c = alloca i1{{(, align [0-9])?}}, !dbg [[cLocation:![0-9]+]]
               OpBranch %20
         %20 = OpLabel
         %21 = OpLoad %bool %c
; Check we're not mistakenly adding debug locations to the instructions in this
; block; the range should have ended at the last block terminator instruction
; (the OpBranch)
; CHECK: = load i1, ptr %c{{(, align [0-9])?$}}
               OpReturn
; CHECK: ret void{{$}}
               OpFunctionEnd
; CHECK: }

; CHECK: !llvm.dbg.cu = !{[[CompileUnit:![0-9]+]]}
; CHECK: !llvm.ident = !{!{{[0-9]+}}}
;
; CHECK: [[CompileUnit]] = distinct !DICompileUnit(language: DW_LANG_OpenCL, file: [[File:![0-9]+]],{{( producer: "Codeplay SPIR-V  translator",)?}} isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug{{(, enums: ![0-9]+)?}}{{(, subprograms: ![0-9]+)?}})
; CHECK: [[File]] = !DIFile(filename: "debug_info.comp", directory: "modules/spirv-ll-tool/test/spvasm")
; CHECK: [[mainSubprogram]] = distinct !DISubprogram(name: "main", linkageName: "main", scope: null, file: [[File]],
; CHECK-SAME: line: 4, type: [[mainSubroutineType:![0-9]+]]
; CHECK-SAME: {{(, isLocal: true, isDefinition: true)?}}, scopeLine: 1
; CHECK-SAME: {{(, isOptimized: false)?}}
; CHECK-SAME: {{(, spFlags: DISPFlagDefinition)?}}
; CHECK-SAME: {{(, unit: ![0-9]+)?}}
; CHECK-SAME: {{(, (variables|retainedNodes): ![0-9]+)?}}
; CHECK-SAME: )
; CHECK: [[mainSubroutineType]] = !DISubroutineType(types: !{{[0-9]+}})
; CHECK: [[aLocation]] = !DILocation(line: 6, column: 3, scope: [[mainLexicalBlock:![0-9]+]])
; CHECK: [[mainLexicalBlock]] = distinct !DILexicalBlock(scope: [[mainSubprogram]], file: [[File]], line: 5, column: 2)
; CHECK: [[bLocation]] = !DILocation(line: 7, column: 3, scope: [[mainLexicalBlock]])
; CHECK: [[ifConditionLocation]] = !DILocation(line: 8, column: 3, scope: [[mainLexicalBlock]])
; CHECK: [[ifTrueBlockLocation]] = !DILocation(line: 8, column: 3, scope: [[ifLexicalBlock:![0-9]+]])
; CHECK: [[ifLexicalBlock]] = distinct !DILexicalBlock(scope: [[mainSubprogram]], file: !{{[0-9]+}}, line: 8, column: 3)
; CHECK: [[ifJoinLocation]] = !DILocation(line: 9, column: 5, scope: [[ifLexicalBlock]])

; CHECK: [[testfn2Subprogram]] = distinct !DISubprogram(name: "testfn2", linkageName: "testfn2",
; CHECK-SAME: scope: null, file: [[File]],
; CHECK-SAME: line: 5, type: [[mainSubroutineType]],
; CHECK-SAME: scopeLine: 1, spFlags: DISPFlagDefinition,
; CHECK-SAME: unit: {{![0-9]+}}{{(, retainedNodes: ![0-9]+)?}})

; Copyright (C) Codeplay Software Limited
;
; Licensed under the Apache License, Version 2.0 (the "License") with LLVM
; Exceptions; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     https://github.com/codeplaysoftware/oneapi-construction-kit/blob/main/LICENSE.txt
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
; WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
; License for the specific language governing permissions and limitations
; under the License.
;
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

; RUN: %if online-spirv-as %{ spirv-as --target-env %spv_tgt_env -o %spv_file_s %s %}
; RUN: %if online-spirv-as %{ spirv-val %spv_file_s %}
; RUN: spirv-ll-tool -a Vulkan -c VariablePointersStorageBuffer -e SPV_KHR_variable_pointers %spv_file_s | FileCheck %s
; tests that variable pointers work correctly with functions, that they can be
; passed as arguments and returned
               OpCapability Shader
               OpCapability VariablePointersStorageBuffer
               OpExtension "SPV_KHR_variable_pointers"
               OpMemoryModel Logical GLSL450
               OpEntryPoint GLCompute %main "main"
               OpExecutionMode %main LocalSize 1 1 1
               OpSource GLSL 450
               OpName %main "main"
               OpName %foo_b1_b1_ "foo(b1;b1;"
               OpName %a "a"
               OpName %b "b"
               OpName %res "res"
               OpName %param "param"
               OpName %param_0 "param"
               OpDecorate %res DescriptorSet 0
               OpDecorate %res Binding 0
               OpDecorate %param DescriptorSet 0
               OpDecorate %param Binding 1
               OpDecorate %param_0 DescriptorSet 0
               OpDecorate %param_0 Binding 2
       %void = OpTypeVoid
       %uint = OpTypeInt 32 0
%_ptr_StorageBuffer_uint = OpTypePointer StorageBuffer %uint
%_ptr_Function_uint = OpTypePointer Function %uint
%_ptr_Function__ptr_StorageBuffer_uint = OpTypePointer Function %_ptr_StorageBuffer_uint
         %14 = OpTypeFunction %void
         %15 = OpTypeFunction %_ptr_Function_uint %_ptr_Function__ptr_StorageBuffer_uint %_ptr_Function__ptr_StorageBuffer_uint
        %res = OpVariable %_ptr_StorageBuffer_uint StorageBuffer
      %param = OpVariable %_ptr_StorageBuffer_uint StorageBuffer
    %param_0 = OpVariable %_ptr_StorageBuffer_uint StorageBuffer
       %main = OpFunction %void None %14
         %16 = OpLabel
         %17 = OpVariable %_ptr_Function__ptr_StorageBuffer_uint Function
         %18 = OpVariable %_ptr_Function__ptr_StorageBuffer_uint Function
               OpStore %17 %param
               OpStore %18 %param_0
         %19 = OpFunctionCall %_ptr_Function_uint %foo_b1_b1_ %17 %18
         %20 = OpLoad %uint %19
               OpStore %res %20
               OpReturn
               OpFunctionEnd
 %foo_b1_b1_ = OpFunction %_ptr_Function_uint None %15
          %a = OpFunctionParameter %_ptr_Function__ptr_StorageBuffer_uint
          %b = OpFunctionParameter %_ptr_Function__ptr_StorageBuffer_uint
         %21 = OpLabel
         %22 = OpVariable %_ptr_Function_uint Function
         %23 = OpLoad %_ptr_StorageBuffer_uint %a
         %24 = OpLoad %uint %23
         %25 = OpLoad %_ptr_StorageBuffer_uint %b
         %26 = OpLoad %uint %25
         %27 = OpIAdd %uint %24 %26
               OpStore %22 %27
               OpReturnValue %22
               OpFunctionEnd
; CHECK: ; ModuleID = '{{.*}}'
; CHECK: source_filename = "{{.*}}"
; CHECK: define spir_kernel void @main(ptr addrspace(1) %res, ptr addrspace(1) %param, ptr addrspace(1) %param1, ptr addrspace(1){{( %0)?}})
; CHECK: = alloca ptr addrspace(1)
; CHECK: = alloca ptr addrspace(1)
; CHECK: store ptr addrspace(1) {{[%@].*}}, ptr {{[%@].*}}
; CHECK: store ptr addrspace(1) {{[%@].*}}, ptr {{[%@].*}}
; CHECK: = call spir_func ptr @{{(foo|"foo\(.+")}}(ptr {{[%@].*}}, ptr {{[%@].*}})
; CHECK: = load i32, ptr {{[%@].*}}
; CHECK: store i32 {{[%@].*}}, ptr addrspace(1) {{[%@].*}}
; CHECK: ret void
; CHECK: define private spir_func ptr @{{(foo|"foo\(.+")}}(ptr {{[%@].*}}, ptr {{[%@].*}})
; CHECK: = load ptr addrspace(1), ptr {{[%@].*}}
; CHECK: = load i32, ptr addrspace(1) {{[%@].*}}
; CHECK: = load ptr addrspace(1), ptr {{[%@].*}}
; CHECK: = load i32, ptr addrspace(1) {{[%@].*}}
; CHECK: = add i32 {{[%@].*}}, {{[%@].*}}
; CHECK: store i32 {{[%@].*}}, ptr {{[%@].*}}
; CHECK: ret ptr {{[%@].*}}

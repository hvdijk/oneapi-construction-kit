; Copyright (C) Codeplay Software Limited
;
; Licensed under the Apache License, Version 2.0 (the "License") with LLVM
; Exceptions; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     https://github.com/codeplaysoftware/oneapi-construction-kit/blob/main/LICENSE.txt
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
; WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
; License for the specific language governing permissions and limitations
; under the License.
;
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

; RUN: %if online-spirv-as %{ spirv-as --target-env %spv_tgt_env -o %spv_file_s %s %}
; RUN: %if online-spirv-as %{ spirv-val %spv_file_s %}
; RUN: spirv-ll-tool -a Vulkan -c Float64 -c Int64 %spv_file_s | FileCheck %s
            OpCapability Shader
            OpCapability Float64
            OpCapability Int64
            OpMemoryModel Logical GLSL450
            OpEntryPoint GLCompute %main "main"
            OpExecutionMode %main LocalSize 1 1 1
            OpSource GLSL 450
            OpName %main "main"
            OpName %cond "cond"
               OpName %a "a"
               OpName %res "res"
       %void = OpTypeVoid
          %3 = OpTypeFunction %void
       %bool = OpTypeBool
%_ptr_Function_bool = OpTypePointer Function %bool
          %9 = OpConstantFalse %bool
        %int = OpTypeInt 32 1
%_ptr_Function_int = OpTypePointer Function %int
         %13 = OpConstant %int 0
         %17 = OpConstant %int 24
         %19 = OpConstant %int 42
       %main = OpFunction %void None %3
          %5 = OpLabel
       %cond = OpVariable %_ptr_Function_bool Function
          %a = OpVariable %_ptr_Function_int Function
        %res = OpVariable %_ptr_Function_int Function
               OpStore %cond %9
               OpStore %a %13
         %14 = OpLoad %bool %cond
               OpSelectionMerge %16 None
               OpBranchConditional %14 %15 %18 ; testing this
         %15 = OpLabel
               OpStore %a %17
               OpBranch %16
         %18 = OpLabel
               OpStore %a %19
               OpBranch %16
         %16 = OpLabel
         %21 = OpLoad %int %a
         %22 = OpBitwiseXor %int %21 %19
               OpStore %res %22
               OpReturn
               OpFunctionEnd
; CHECK: ; ModuleID = '{{.*}}'
; CHECK: define spir_kernel void @main()
; CHECK: = alloca i1
; CHECK: = alloca i32
; CHECK: store i1 false, ptr {{[%@].*}}
; CHECK: = load i1, ptr {{[%@].*}}
; CHECK: br i1 {{[%@].*}}, label {{[%@].*}}, label {{[%@].*}}
; CHECK: {{[0-9]+:}}
; CHECK: store i32 24, ptr {{[%@].*}}
; CHECK: br label {{[%@].*}}
; CHECK: {{[0-9]+:}}
; CHECK: store i32 42, ptr {{[%@].*}}
; CHECK: br label {{[%@].*}}
; CHECK: {{[0-9]+:}}
; CHECK: = load i32, ptr {{[%@].*}}
; CHECK: = xor i32 {{[%@].*}}, 42
; CHECK: store i32 {{[%@].*}}, ptr {{[%@].*}}
; CHECK: ret void

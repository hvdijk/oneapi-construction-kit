; Copyright (C) Codeplay Software Limited
;
; Licensed under the Apache License, Version 2.0 (the "License") with LLVM
; Exceptions; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     https://github.com/codeplaysoftware/oneapi-construction-kit/blob/main/LICENSE.txt
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
; WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
; License for the specific language governing permissions and limitations
; under the License.
;
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

; RUN: %if online-spirv-as %{ spirv-as --target-env %spv_tgt_env -o %spv_file_s %s %}
; RUN: %if online-spirv-as %{ spirv-val %spv_file_s %}
; RUN: spirv-ll-tool -a Vulkan -c Float64 -c Int64 -c Addresses %spv_file_s | FileCheck %s
; CHECK: ; ModuleID = '{{.*}}'
               OpCapability Shader
               OpCapability Addresses
               OpCapability Float64
               OpCapability Int64
               OpMemoryModel Logical GLSL450
               OpEntryPoint GLCompute %main "main"
               OpExecutionMode %main LocalSize 1 1 1
               OpSource GLSL 450
               OpName %main "main"
               OpName %main "main"
               OpName %a "a"
               OpName %b "b"
       %void = OpTypeVoid
          %3 = OpTypeFunction %void
     %size_t = OpTypeInt 32 0
        %int = OpTypeInt 32 1
    %ptr_int = OpTypePointer Function %int
         %14 = OpConstant %int -42
         %15 = OpConstant %size_t 4
       %main = OpFunction %void None %3
; CHECK: define spir_kernel void @main()
          %5 = OpLabel
          %a = OpVariable %ptr_int Function
; CHECK: %a = alloca i32
          %b = OpVariable %ptr_int Function
; CHECK: %b = alloca i32
               OpStore %a %14
; CHECK: store i32 -42, ptr %a
               OpCopyMemorySized %b %a %15
; The alignment argument is no longer emitted in LLVM 7, so it's optional {{   below  }}
; The bitcasted alloca arguments are required strong alignment in LLVM 11, so included optional alignment string
; CHECK: call void @llvm.memcpy.p0.p0.i32(ptr{{( align [0-9])?}} %b, ptr{{( align [0-9])?}} %a, i32 4{{(, i32 0)?}}, i1 false)
               OpReturn
; CHECK: ret void
               OpFunctionEnd
; CHECK: }

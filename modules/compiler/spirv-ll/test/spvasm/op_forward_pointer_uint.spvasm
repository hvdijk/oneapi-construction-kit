; Copyright (C) Codeplay Software Limited
;
; Licensed under the Apache License, Version 2.0 (the "License") with LLVM
; Exceptions; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     https://github.com/codeplaysoftware/oneapi-construction-kit/blob/main/LICENSE.txt
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
; WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
; License for the specific language governing permissions and limitations
; under the License.
;
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

; RUN: %if online-spirv-as %{ spirv-as --target-env %spv_tgt_env -o %spv_file_s %s %}
; RUN: %if online-spirv-as %{ spirv-val %spv_file_s %}
; RUN: spirv-ll-tool -a Vulkan -c Addresses -c Float64 -c Int64 %spv_file_s | FileCheck %s
; CHECK: ; ModuleID = '{{.*}}'
                        OpCapability Addresses
                        OpCapability Shader
                        OpCapability Float64
                        OpCapability Int64
                        OpMemoryModel Logical GLSL450
                        OpEntryPoint GLCompute %main "main"
                        OpExecutionMode %main LocalSize 1 1 1
                        OpSource GLSL 450
                        OpName %main "main"
                        OpName %main "main"
                        OpName %res "res"
                        OpName %Foo "Foo"
                        OpMemberName %Foo 0 "a"
                        OpMemberName %Foo 1 "b"
                        OpName %f "f"
                %void = OpTypeVoid
                   %3 = OpTypeFunction %void
               %float = OpTypeFloat 32
 %_ptr_Function_float = OpTypePointer Function %float
                %uint = OpTypeInt 32 0  ; this should be blank if type is Foo
                   %9 = OpConstant %float 42.42
                        OpTypeForwardPointer %ptr_Foo Function
            %ptr_uint = OpTypePointer Function %uint
                 %Foo = OpTypeStruct %uint %float %ptr_uint
; CHECK: [[Foo:%.*]] = type { i32, float, ptr }
             %ptr_Foo = OpTypePointer Function %Foo
                  %14 = OpConstant %uint 1
                %main = OpFunction %void None %3
; CHECK: define spir_kernel void @main()
                   %5 = OpLabel
                 %res = OpVariable %_ptr_Function_float Function
; CHECK: %res = alloca float
                   %f = OpVariable %ptr_Foo Function
; CHECK: %f = alloca [[Foo]]
                  %15 = OpInBoundsAccessChain %_ptr_Function_float %f %14
; CHECK: [[float_ptr:%.*]] = getelementptr inbounds [[Foo]], ptr %f, i32 0, i32 1
                  %16 = OpLoad %float %15
; CHECK: [[float_value:%.*]] = load float, ptr [[float_ptr]]
                  %17 = OpFAdd %float %9 %16
; CHECK: [[res:%.*]] = fadd float 0x404535C280000000, [[float_value]]
                        OpStore %res %17
; CHECK: store float [[res]], ptr %res
                        OpReturn
; CHECK: ret void
                        OpFunctionEnd
; CHECK: }

; Copyright (C) Codeplay Software Limited
;
; Licensed under the Apache License, Version 2.0 (the "License") with LLVM
; Exceptions; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     https://github.com/codeplaysoftware/oneapi-construction-kit/blob/main/LICENSE.txt
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
; WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
; License for the specific language governing permissions and limitations
; under the License.
;
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

; RUN: %if online-spirv-as %{ spirv-as --target-env %spv_tgt_env -o %spv_file_s %s %}
; RUN: %if online-spirv-as %{ spirv-val %spv_file_s %}
; RUN: spirv-ll-tool -a Vulkan %spv_file_s | FileCheck %s
; CHECK: ; ModuleID = '{{.*}}'
               OpCapability Shader
               OpMemoryModel Logical GLSL450
               OpEntryPoint GLCompute %main "main" %gl_GlobalInvocationID
               OpExecutionMode %main LocalSize 1 1 1
               OpSource GLSL 450
               OpName %main "main"
               OpName %id "id"
               OpName %gl_GlobalInvocationID "gl_GlobalInvocationID"
               OpName %ablock "ablock"
               OpName %bblock "bblock"
               OpName %cblock "cblock"
               OpName %dblock "dblock"
               OpName %inGroup "inGroup"
               OpName %outGroup "outGroup"
               OpName %blockGroup "blockGroup"
               OpName %offsetGroup "offsetGroup"
               OpDecorate %inGroup DescriptorSet 0
               OpDecorate %inGroup NonWritable
               OpDecorate %outGroup DescriptorSet 0
               OpDecorate %outGroup Binding 3
               OpDecorate %blockGroup Block
               OpDecorate %offsetGroup Offset 0
    %inGroup = OpDecorationGroup 
   %outGroup = OpDecorationGroup
 %blockGroup = OpDecorationGroup
%offsetGroup = OpDecorationGroup
               OpGroupDecorate %inGroup %__0 %__1 %__2 
               OpGroupDecorate %outGroup %_
; Do some redundant decorating like the CTS to make sure duplicates are handled
               OpDecorate %_ DescriptorSet 0
               OpDecorate %_ Binding 3
               OpGroupDecorate %blockGroup %ablock %bblock %cblock
               OpGroupMemberDecorate %offsetGroup %ablock 0 %bblock 0 %cblock 0 %dblock 0
               OpDecorate %gl_GlobalInvocationID BuiltIn GlobalInvocationId
               OpDecorate %dblock BufferBlock
               OpDecorate %_runtimearr_int ArrayStride 4
               OpDecorate %__0 Binding 0
               OpDecorate %__1 Binding 1
               OpDecorate %__2 Binding 2
       %void = OpTypeVoid
          %3 = OpTypeFunction %void
       %uint = OpTypeInt 32 0
        %int = OpTypeInt 32 1
%_runtimearr_int = OpTypeRuntimeArray %int
     %ablock = OpTypeStruct %int
     %bblock = OpTypeStruct %int
     %cblock = OpTypeStruct %int
     %dblock = OpTypeStruct %_runtimearr_int
; CHECK: = type { i32 }
; CHECK: = type { i32 }
; CHECK: = type { i32 }
; CHECK: = type { [0 x i32] }
    %v3uint = OpTypeVector %uint 3
 %_ptr_Function_uint = OpTypePointer Function %uint
   %_ptr_Uniform_int = OpTypePointer Uniform %int
  %_ptr_Input_v3uint = OpTypePointer Input %v3uint
    %_ptr_Input_uint = OpTypePointer Input %uint
%_ptr_Uniform_ablock = OpTypePointer Uniform %ablock
%_ptr_Uniform_bblock = OpTypePointer Uniform %bblock
%_ptr_Uniform_cblock = OpTypePointer Uniform %cblock
%_ptr_Uniform_dblock = OpTypePointer Uniform %dblock
        %__0 = OpVariable %_ptr_Uniform_ablock Uniform
        %__1 = OpVariable %_ptr_Uniform_bblock Uniform
        %__2 = OpVariable %_ptr_Uniform_cblock Uniform
          %_ = OpVariable %_ptr_Uniform_dblock Uniform
%gl_GlobalInvocationID = OpVariable %_ptr_Input_v3uint Input
     %uint_0 = OpConstant %uint 0
      %int_0 = OpConstant %int 0
       %main = OpFunction %void None %3
; CHECK: define spir_kernel void @main(ptr addrspace(1){{( %0)?}}, ptr addrspace(1){{( %1)?}}, ptr addrspace(1){{( %2)?}}, ptr addrspace(1){{( %3)?}}, ptr addrspace(1){{( %4)?}}) #0 {
          %5 = OpLabel
         %id = OpVariable %_ptr_Function_uint Function
; CHECK:   = alloca i32
         %14 = OpAccessChain %_ptr_Input_uint %gl_GlobalInvocationID %uint_0
         %15 = OpLoad %uint %14
; CHECK:   = call spir_func {{i[0-9]+}} @_Z13get_global_idj(i32 0)
               OpStore %id %15
; CHECK:   store i32 {{[%@].*}}, ptr {{[%@].*}}
         %22 = OpLoad %uint %id
; CHECK:   = load i32, ptr {{[%@].*}}
         %27 = OpAccessChain %_ptr_Uniform_int %__0 %int_0
         %32 = OpAccessChain %_ptr_Uniform_int %__1 %int_0
         %38 = OpAccessChain %_ptr_Uniform_int %__2 %int_0
         %47 = OpAccessChain %_ptr_Uniform_int %_ %int_0 %22
; CHECK:   = getelementptr {{[%@].*}}, ptr addrspace(1) {{[%@].*}}, i32 0, i32 0
; CHECK:   = getelementptr {{[%@].*}}, ptr addrspace(1) {{[%@].*}}, i32 0, i32 0
; CHECK:   = getelementptr {{[%@].*}}, ptr addrspace(1) {{[%@].*}}, i32 0, i32 0
; CHECK:   = getelementptr {{[%@].*}}, ptr addrspace(1) {{[%@].*}}, i32 0, i32 0, i32 {{[%@].*}}
         %28 = OpLoad %int %27
         %33 = OpLoad %int %32
         %39 = OpLoad %int %38
; CHECK:   = load i32, ptr addrspace(1) {{[%@].*}}
; CHECK:   = load i32, ptr addrspace(1) {{[%@].*}}
; CHECK:   = load i32, ptr addrspace(1) {{[%@].*}}
         %34 = OpIAdd %int %28 %33
         %40 = OpIAdd %int %34 %39
; CHECK:   = add i32 {{[%@].*}}, {{[%@].*}}
; CHECK:   = add i32 {{[%@].*}}, {{[%@].*}}
               OpStore %47 %40
; CHECK:   store i32 {{[%@].*}}, ptr addrspace(1) {{[%@].*}}
               OpReturn
; CHECK:   ret void
               OpFunctionEnd
; CHECK: declare spir_func {{i[0-9]+}} @_Z13get_global_idj

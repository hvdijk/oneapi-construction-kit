; Copyright (C) Codeplay Software Limited
;
; Licensed under the Apache License, Version 2.0 (the "License") with LLVM
; Exceptions; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     https://github.com/codeplaysoftware/oneapi-construction-kit/blob/main/LICENSE.txt
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
; WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
; License for the specific language governing permissions and limitations
; under the License.
;
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

; RUN: %if online-spirv-as %{ spirv-as --target-env %spv_tgt_env -o %spv_file_s %s %}
; RUN: %if online-spirv-as %{ spirv-val %spv_file_s %}
; RUN: spirv-ll-tool -a Vulkan %spv_file_s | FileCheck %s
; CHECK: ; ModuleID = '{{.*}}'
               OpCapability Shader
               OpMemoryModel Logical GLSL450
               OpEntryPoint GLCompute %main "main"
               OpExecutionMode %main LocalSize 1 1 1
               OpSource GLSL 450
               OpName %main "main"
               OpName %out_buffer "out_buffer"
               OpMemberName %out_buffer 0 "out_bools"
               OpName %_ ""
               OpDecorate %group Volatile
               OpDecorate %group Coherent
               OpDecorate %group Offset 0
      %group = OpDecorationGroup
               OpGroupMemberDecorate %group %out_buffer 0
               OpMemberDecorate %out_buffer 1 Offset 4
               OpDecorate %out_buffer BufferBlock
               OpDecorate %_ DescriptorSet 0
               OpDecorate %_ Binding 0
       %void = OpTypeVoid
          %3 = OpTypeFunction %void
        %int = OpTypeInt 32 1
%_ptr_Function_int = OpTypePointer Function %int
 %out_buffer = OpTypeStruct %int %int
%_ptr_Uniform_out_buffer = OpTypePointer Uniform %out_buffer
          %_ = OpVariable %_ptr_Uniform_out_buffer Uniform
      %int_0 = OpConstant %int 0
%_ptr_Uniform_int = OpTypePointer Uniform %int
      %int_1 = OpConstant %int 1
       %main = OpFunction %void None %3
          %5 = OpLabel
    %in_bool = OpVariable %_ptr_Function_int Function
         %17 = OpAccessChain %_ptr_Uniform_int %_ %int_0
         %18 = OpLoad %int %17
               OpStore %in_bool %18
         %19 = OpLoad %int %in_bool
         %21 = OpIAdd %int %19 %int_1
               OpStore %in_bool %21
         %22 = OpLoad %int %in_bool
         %23 = OpAccessChain %_ptr_Uniform_int %_ %int_1
               OpStore %23 %22
               OpReturn
               OpFunctionEnd
; CHECK: [[STRUCT:%.*]] = type { i32, i32 }
; CHECK: define spir_kernel void @main(ptr addrspace(1){{( %0)?}}, ptr addrspace(1){{( %1)?}}) #0 {
; CHECK: [[IN_GEP:%.*]] = getelementptr [[STRUCT]], ptr addrspace(1) %0, i32 0, i32 0
; Check that the volatile decoration was correctly propagated to the result of the GEP
; CHECK: = load volatile i32, ptr addrspace(1) [[IN_GEP]]
; CHECK: [[OUT_GEP:%.*]] = getelementptr [[STRUCT]], ptr addrspace(1) %0, i32 0, i32 1
; Check that the volatile decoration was only applied to the first member
; CHECK: store i32 {{%.*}}, ptr addrspace(1) [[OUT_GEP]]

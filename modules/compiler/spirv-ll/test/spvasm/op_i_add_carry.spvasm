; Copyright (C) Codeplay Software Limited
;
; Licensed under the Apache License, Version 2.0 (the "License") with LLVM
; Exceptions; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     https://github.com/codeplaysoftware/oneapi-construction-kit/blob/main/LICENSE.txt
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
; WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
; License for the specific language governing permissions and limitations
; under the License.
;
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

; RUN: %if online-spirv-as %{ spirv-as --target-env %spv_tgt_env -o %spv_file_s %s %}
; RUN: %if online-spirv-as %{ spirv-val %spv_file_s %}
; RUN: spirv-ll-tool -a Vulkan %spv_file_s | FileCheck %s
               OpCapability Shader
               OpMemoryModel Logical GLSL450
               OpEntryPoint GLCompute %main "main"
               OpExecutionMode %main LocalSize 1 1 1
               OpSource GLSL 450
               OpSourceExtension "GL_GOOGLE_cpp_style_line_directive"
               OpSourceExtension "GL_GOOGLE_include_directive"
               OpName %main "main"
               OpName %Foo "Foo"
               OpMemberName %Foo 0 "a"
               OpMemberName %Foo 1 "b"
               OpName %foo "foo"
               OpName %a "a"
               OpName %b "b"
       %void = OpTypeVoid
          %3 = OpTypeFunction %void
                  %int = OpTypeInt 32 0
        %Foo = OpTypeStruct %int %int
    %ptr_Foo = OpTypePointer Function %Foo
    %ptr_int = OpTypePointer Function %int
         %14 = OpConstant %int 42
         %16 = OpConstant %int 42
       %main = OpFunction %void None %3
          %5 = OpLabel
        %foo = OpVariable %ptr_Foo Function
          %a = OpVariable %ptr_int Function
          %b = OpVariable %ptr_int Function
               OpStore %a %14
               OpStore %b %16
         %18 = OpLoad %int %a
         %19 = OpLoad %int %b
         %20 = OpIAddCarry %Foo %18 %19 ;testing this
               OpStore %foo %20
               OpReturn
               OpFunctionEnd
; CHECK: ; ModuleID = '{{.*}}'
; CHECK: = type { i32, i32 }
; CHECK: define spir_kernel void @main()
; CHECK: = alloca i32
; CHECK: = alloca i32
; CHECK: store i32 42, ptr {{[%@].*}}
; CHECK: store i32 42, ptr {{[%@].*}}
; CHECK: = load i32, ptr {{[%@].*}}
; CHECK: = load i32, ptr {{[%@].*}}
; CHECK: = call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 {{[%@].*}}, i32 {{[%@].*}})
; CHECK: = extractvalue { i32, i1 } {{[%@].*}}, 0
; CHECK: = insertvalue {{[%@].*}} undef, i32 {{[%@].*}}, {{[0-9]+}}
; CHECK: = extractvalue { i32, i1 } {{[%@].*}}, 1
; CHECK: = sext i1 {{[%@].*}} to i32
; CHECK: = insertvalue {{[%@].*}} {{[%@].*}}, i32 {{[%@].*}}, {{[0-9]+}}
; CHECK: store {{[%@].*}} {{[%@].*}}, ptr {{[%@].*}}
; CHECK: ret void

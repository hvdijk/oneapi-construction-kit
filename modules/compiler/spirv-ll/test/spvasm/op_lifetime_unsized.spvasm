; Copyright (C) Codeplay Software Limited
;
; Licensed under the Apache License, Version 2.0 (the "License") with LLVM
; Exceptions; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     https://github.com/uxlfoundation/oneapi-construction-kit/blob/main/LICENSE.txt
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
; WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
; License for the specific language governing permissions and limitations
; under the License.
;
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

; RUN: %if online-spirv-as %{ spirv-as --target-env %spv_tgt_env -o %spv_file_s %s %}
; RUN: %if online-spirv-as %{ spirv-val %spv_file_s %}
; RUN: spirv-ll-tool -a OpenCL -b 64 -c Float64 %spv_file_s | FileCheck %s
            OpCapability Kernel
            OpCapability Addresses
            OpCapability Float64
            OpCapability Int64
            OpMemoryModel Physical64 OpenCL
            OpEntryPoint Kernel %lifetime "lifetime"
            OpName %lifetime "lifetime"
            OpName %a "a"
    %void = OpTypeVoid
    %uint = OpTypeInt 32 0
%_ptr_Function_uint = OpTypePointer Function %uint
       %3 = OpTypeFunction %void
       %9 = OpConstant %uint 424
  %uint_1 = OpConstant %uint 1
  %uint_0 = OpConstant %uint 0
  %lifetime = OpFunction %void None %3
       %5 = OpLabel
       %a = OpVariable %_ptr_Function_uint Function
            OpStore %a %uint_0
            OpLifetimeStart %a 0
            OpStore %a %uint_1
            OpLifetimeStop %a 0
            OpStore %a %9
            OpReturn
            OpFunctionEnd
; CHECK: ; ModuleID = '{{.*}}'
; CHECK: define spir_kernel void @lifetime()
; CHECK: [[PTR:%.*]] = alloca i32
; CHECK: store i32 0, ptr [[PTR]]
; LLVM 4.0 doesn't need to add the address space as it assumes 0
; CHECK: call void @llvm.lifetime.start.p0({{(i64 -1, )?}}ptr [[PTR]])
; CHECK: store i32 1, ptr [[PTR]]
; CHECK: call void @llvm.lifetime.end.p0({{(i64 -1, )?}}ptr [[PTR]])
; CHECK: store i32 424, ptr [[PTR]]
; CHECK: ret void
; CHECK: declare void @llvm.lifetime.start.p0({{(i64 immarg, )?}}ptr {{nocapture|captures\(none\)}})
; CHECK: declare void @llvm.lifetime.end.p0({{(i64 immarg, )?}}ptr {{nocapture|captures\(none\)}})

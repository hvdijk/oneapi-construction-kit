; Copyright (C) Codeplay Software Limited
;
; Licensed under the Apache License, Version 2.0 (the "License") with LLVM
; Exceptions; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     https://github.com/codeplaysoftware/oneapi-construction-kit/blob/main/LICENSE.txt
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
; WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
; License for the specific language governing permissions and limitations
; under the License.
;
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

; RUN: %if online-spirv-as %{ spirv-as --target-env %spv_tgt_env -o %spv_file_s %s %}
; RUN: %if online-spirv-as %{ spirv-val %spv_file_s %}
; RUN: spirv-ll-tool -a Vulkan -c Float64 %spv_file_s | FileCheck %s
               OpCapability Shader
               OpCapability Float64
               OpMemoryModel Logical GLSL450
               OpEntryPoint GLCompute %main "main"
               OpExecutionMode %main LocalSize 1 1 1
               OpSource GLSL 450
               OpName %main "main"
               OpName %foo "foo"
               OpName %buzz "buzz"
               OpName %baz "baz"
               OpName %bar "bar"
               OpName %outer_struct "outer_struct"
               OpName %_ ""
               OpMemberDecorate %baz 4 Volatile
               OpMemberDecorate %foo 1 Volatile
               OpDecorate %_ DescriptorSet 0
               OpDecorate %_ Binding 0
       %void = OpTypeVoid
          %3 = OpTypeFunction %void
        %int = OpTypeInt 32 1
%_ptr_Function_int = OpTypePointer Function %int
       %uint = OpTypeInt 32 0
     %double = OpTypeFloat 64
      %int_2 = OpConstant %int 2
      %int_3 = OpConstant %int 3
        %foo = OpTypeStruct %int %int %int
       %buzz = OpTypeStruct %int %int
        %baz = OpTypeStruct %int %foo %int %int %buzz
 %_arr_baz_3 = OpTypeArray %baz %int_3
        %bar = OpTypeStruct %double %int %_arr_baz_3
%outer_struct = OpTypeStruct %int %bar
%_ptr_Uniform_out_buffer = OpTypePointer Uniform %outer_struct
          %_ = OpVariable %_ptr_Uniform_out_buffer Uniform
      %int_0 = OpConstant %int 0
      %int_4 = OpConstant %int 4
%_ptr_Uniform_buzz = OpTypePointer Uniform %buzz
%_ptr_Uniform_int = OpTypePointer Uniform %int
      %int_1 = OpConstant %int 1
       %main = OpFunction %void None %3
          %5 = OpLabel
         %17 = OpAccessChain %_ptr_Uniform_buzz %_ %int_1 %int_2 %int_0 %int_4
         %18 = OpLoad %buzz %17
         %19 = OpCompositeExtract %int %18 0
         %21 = OpIAdd %int %19 %int_1
         %23 = OpAccessChain %_ptr_Uniform_int %_ %int_1 %int_2 %int_1 %int_1 %int_0
               OpStore %23 %21
               OpReturn
               OpFunctionEnd
; CHECK: ; ModuleID = '{{.*}}'
; CHECK: %outer_struct = type { i32, %bar }
; CHECK: %bar = type { double, i32, [3 x %baz] }
; CHECK: %baz = type { i32, %foo, i32, i32, %buzz }
; CHECK: %foo = type { i32, i32, i32 }
; CHECK: %buzz = type { i32, i32 }
; CHECK: define spir_kernel void @main(ptr addrspace(1){{( %0)?}}, ptr addrspace(1){{( %1)?}})
; CHECK: [[LOAD_GEP:%.*]] = getelementptr %outer_struct, ptr addrspace(1) [[IN_STRUCT:%.*]], i32 0, i32 1, i32 2, i32 0, i32 4
; This is what we're testing: OpMemberDecorate makes the load volatile
; CHECK: = load volatile {{%.*}}, ptr addrspace(1) [[LOAD_GEP]]
; CHECK: [[STORE_GEP:%.*]] = getelementptr %outer_struct, ptr addrspace(1) [[IN_STRUCT]], i32 0, i32 1, i32 2, i32 1, i32 1, i32 0
; While member 1 of %foo is volatile, the member we accessed isn't so this should have no qualifier
; CHECK: store i32 {{%.*}}, ptr addrspace(1) [[STORE_GEP]]
; CHECK: ret void

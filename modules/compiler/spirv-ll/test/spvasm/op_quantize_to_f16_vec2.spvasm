; Copyright (C) Codeplay Software Limited
;
; Licensed under the Apache License, Version 2.0 (the "License") with LLVM
; Exceptions; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     https://github.com/codeplaysoftware/oneapi-construction-kit/blob/main/LICENSE.txt
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
; WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
; License for the specific language governing permissions and limitations
; under the License.
;
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

; RUN: %if online-spirv-as %{ spirv-as --target-env %spv_tgt_env -o %spv_file_s %s %}
; RUN: %if online-spirv-as %{ spirv-val %spv_file_s %}
; RUN: spirv-ll-tool -a Vulkan -c Float16 %spv_file_s | FileCheck %s
            OpCapability Shader
            OpCapability Float16
            OpMemoryModel Logical GLSL450
            OpEntryPoint GLCompute %main "main"
            OpExecutionMode %main LocalSize 1 1 1
            OpSource GLSL 450
            OpName %main "main"
            OpName %a "a"
    %void = OpTypeVoid
       %3 = OpTypeFunction %void
   %float = OpTypeFloat 32
    %vec2 = OpTypeVector %float 2
 %floatPi = OpConstant %float 3.1415927410125732421875
  %vec2Pi = OpConstantComposite %vec2 %floatPi %floatPi
%ptr_vec2 = OpTypePointer Function %vec2
    %main = OpFunction %void None %3
       %5 = OpLabel
       %a = OpVariable %ptr_vec2 Function %vec2Pi
      %13 = OpLoad %vec2 %a
      %14 = OpQuantizeToF16 %vec2 %13
            OpStore %a %14
            OpReturn
            OpFunctionEnd
; CHECK: ; ModuleID = '{{.*}}'
; CHECK: define spir_kernel void @main()
; CHECK: [[ARG:%.*]] = alloca <2 x float>
; CHECK: store <2 x float> {{<(float 0x400921FB60000000(, )?)+>|splat \(float 0x400921FB60000000\)}}, ptr [[ARG]]
; CHECK: [[LD_ARG:%.*]] = load <2 x float>, ptr [[ARG]]
; CHECK: [[RES:%.*]] = call spir_func <2 x float> @_Z13quantizeToF16Dv2_f(<2 x float> [[LD_ARG]])
; CHECK: store <2 x float> [[RES]], ptr [[ARG]]
; CHECK: ret void

; Copyright (C) Codeplay Software Limited
;
; Licensed under the Apache License, Version 2.0 (the "License") with LLVM
; Exceptions; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     https://github.com/codeplaysoftware/oneapi-construction-kit/blob/main/LICENSE.txt
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
; WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
; License for the specific language governing permissions and limitations
; under the License.
;
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

; RUN: %if online-spirv-as %{ spirv-as --target-env %spv_tgt_env -o %spv_file_s %s %}
; RUN: %if online-spirv-as %{ spirv-val %spv_file_s %}
; RUN: spirv-ll-tool -a Vulkan -c Float64 -c Int64 %spv_file_s | FileCheck %s
; CHECK: ; ModuleID = '{{.*}}'
                      OpCapability Shader
                      OpCapability Float64
                      OpCapability Int64
                      OpMemoryModel Logical GLSL450
                      OpEntryPoint GLCompute %main "main"
                      OpExecutionMode %main LocalSize 1 1 1
                      OpSource GLSL 450
                      OpName %main "main"
                      OpName %a "a"
                      OpName %b "b"
              %void = OpTypeVoid
           %main_fn = OpTypeFunction %void
              %bool = OpTypeBool
%_ptr_Function_bool = OpTypePointer Function %bool
              %true = OpConstantTrue %bool
              %long = OpTypeInt 64 1
          %ptr_long = OpTypePointer Function %long
                %17 = OpConstant %long -4200000000
                %19 = OpConstant %long 4200000000
              %main = OpFunction %void None %main_fn
; CHECK: define spir_kernel void @main()
                 %5 = OpLabel
                 %a = OpVariable %_ptr_Function_bool Function
; CHECK: %a = alloca i1
                 %b = OpVariable %ptr_long Function
; CHECK: %b = alloca i64
                      OpStore %a %true
; CHECK: store i1 true, ptr %a
                %14 = OpLoad %bool %a
; CHECK: [[aValue:%.*]] = load i1, ptr %a
                %15 = OpSelect %long %14 %17 %19  ; testing this
; CHECK: [[selected:%.*]] = select i1 [[aValue]], i64 -4200000000, i64 4200000000
                      OpStore %b %15
; CHECK: store i64 [[selected]], ptr %b
                      OpReturn
; CHECK: ret void
                      OpFunctionEnd
; CHECK: }

; Copyright (C) Codeplay Software Limited
;
; Licensed under the Apache License, Version 2.0 (the "License") with LLVM
; Exceptions; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     https://github.com/codeplaysoftware/oneapi-construction-kit/blob/main/LICENSE.txt
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
; WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
; License for the specific language governing permissions and limitations
; under the License.
;
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

; RUN: %if online-spirv-as %{ spirv-as --target-env %spv_tgt_env -o %spv_file_s %s %}
; RUN: %if online-spirv-as %{ spirv-val %spv_file_s %}
; RUN: spirv-ll-tool -a Vulkan -c Float64 -c Int64 %spv_file_s | FileCheck %s
; CHECK: ; ModuleID = '{{.*}}'
                            OpCapability Shader
                            OpCapability Float64
                            OpCapability Int64
                            OpMemoryModel Logical GLSL450
                            OpEntryPoint GLCompute %main "main"
                            OpExecutionMode %main LocalSize 1 1 1
                            OpSource GLSL 450
                            OpName %main "main"
                            OpName %test_block "test_block"
                            OpMemberName %test_block 0 "test_out"
                            OpName %_ ""
                            OpMemberDecorate %test_block 0 Offset 0
                            OpDecorate %test_block BufferBlock
                            OpDecorate %_ DescriptorSet 0
                            OpDecorate %_ Binding 0
                            OpDecorate %12 SpecId 0
                    %void = OpTypeVoid
                       %3 = OpTypeFunction %void
                %idx_type = OpTypeInt 32 0
                    %long = OpTypeInt 64 1
                %vec_long = OpTypeVector %long 3
              %test_block = OpTypeStruct %vec_long
; CHECK: [[uniforms:%.*]] = type { <3 x i64> }
 %_ptr_Uniform_test_block = OpTypePointer Uniform %test_block
                       %_ = OpVariable %_ptr_Uniform_test_block Uniform
                      %11 = OpConstant %idx_type 0
                      %12 = OpSpecConstant %long -4200000000
                      %13 = OpSpecConstantComposite %vec_long %12 %12 %12  ; testing this
            %ptr_vec_long = OpTypePointer Uniform %vec_long
                    %main = OpFunction %void None %3
; CHECK: define spir_kernel void @main(ptr addrspace(1){{( %0)?}}, ptr addrspace(1){{( %1)?}})
                       %5 = OpLabel
                      %15 = OpAccessChain %ptr_vec_long %_ %11
; CHECK: [[uniformVecPointer:%[0-9]+]] = getelementptr [[uniforms]], ptr addrspace(1) {{%.*}}, i32 0, i32 0
                            OpStore %15 %13
; CHECK: store <3 x i64> {{<(i64 -4200000000(, )?)+>|splat \(i64 -4200000000\)}}, ptr addrspace(1) [[uniformVecPointer]]
                            OpReturn
; CHECK: ret void
                            OpFunctionEnd
; CHECK: }

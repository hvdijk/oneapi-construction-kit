; Copyright (C) Codeplay Software Limited
;
; Licensed under the Apache License, Version 2.0 (the "License") with LLVM
; Exceptions; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     https://github.com/codeplaysoftware/oneapi-construction-kit/blob/main/LICENSE.txt
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
; WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
; License for the specific language governing permissions and limitations
; under the License.
;
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

; RUN: %if online-spirv-as %{ spirv-as --target-env %spv_tgt_env -o %spv_file_s %s %}
; RUN: %if online-spirv-as %{ spirv-val %spv_file_s %}
; RUN: spirv-ll-tool -a Vulkan -c Float64 -c Int64 %spv_file_s | FileCheck %s
            OpCapability Shader
            OpCapability Float64
            OpCapability Int64
            OpMemoryModel Logical GLSL450
            OpEntryPoint GLCompute %main "main"
            OpExecutionMode %main LocalSize 1 1 1
            OpSource GLSL 450
            OpName %main "main"
            OpName %Foo "Foo"
               OpMemberName %Foo 0 "a"
               OpDecorate %11 SpecId 0
       %void = OpTypeVoid
          %3 = OpTypeFunction %void
        %int = OpTypeInt 32 1
      %v2int = OpTypeVector %int 2
        %Foo = OpTypeStruct %v2int
%_ptr_Function_Foo = OpTypePointer Function %Foo
         %11 = OpSpecConstant %int 42
         %12 = OpSpecConstantComposite %v2int %11 %11
         %13 = OpConstant %int 42
         %14 = OpConstantComposite %v2int %13 %13
         %15 = OpSpecConstantOp %v2int IAdd %12 %14
         %16 = OpSpecConstantComposite %Foo %15
       %main = OpFunction %void None %3
          %5 = OpLabel
         %17 = OpVariable %_ptr_Function_Foo Function
               OpStore %17 %16
               OpReturn
               OpFunctionEnd
; CHECK: ; ModuleID = '{{.*}}'
; CHECK: = type { <2 x i32> }
; CHECK: define spir_kernel void @main()
; CHECK: = alloca {{[%@].*}}
; CHECK: store {{[%@].*}} { <2 x i32> {{<(i32 84(, )?)+>|splat \(i32 84\)}} }, ptr {{[%@].*}}
; CHECK: ret void

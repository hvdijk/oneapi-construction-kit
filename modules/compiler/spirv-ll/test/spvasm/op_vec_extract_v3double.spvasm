; Copyright (C) Codeplay Software Limited
;
; Licensed under the Apache License, Version 2.0 (the "License") with LLVM
; Exceptions; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     https://github.com/codeplaysoftware/oneapi-construction-kit/blob/main/LICENSE.txt
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
; WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
; License for the specific language governing permissions and limitations
; under the License.
;
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

; RUN: %if online-spirv-as %{ spirv-as --target-env %spv_tgt_env -o %spv_file_s %s %}
; RUN: %if online-spirv-as %{ spirv-val %spv_file_s %}
; RUN: spirv-ll-tool -a Vulkan -c Float64 -c Int64 %spv_file_s | FileCheck %s
            OpCapability Shader
            OpCapability Float64
            OpCapability Int64
            OpMemoryModel Logical GLSL450
            OpEntryPoint GLCompute %main "main"
            OpExecutionMode %main LocalSize 1 1 1
            OpSource GLSL 450
            OpName %main "main"
            OpName %a "a"
               OpName %res "res"
       %void = OpTypeVoid
          %3 = OpTypeFunction %void
        %double = OpTypeFloat 64
     %idx_ty = OpTypeInt 32 0
         %v3 = OpTypeVector %double 3
     %ptr_v3 = OpTypePointer Function %v3
          %8 = OpConstant %double -42.42
          %9 = OpConstant %double -42.42
         %10 = OpConstant %double -42.42
         %11 = OpConstant %idx_ty 1
         %12 = OpConstantComposite %v3 %8 %9 %10
    %ptr_double = OpTypePointer Function %double
       %main = OpFunction %void None %3
         %16 = OpLabel
          %a = OpVariable %ptr_v3 Function
        %res = OpVariable %ptr_double Function
               OpStore %a %12
         %19 = OpLoad %v3 %a
         %20 = OpVectorExtractDynamic %double %19 %11
               OpStore %res %20
               OpReturn
               OpFunctionEnd
; CHECK: ; ModuleID = '{{.*}}'
; CHECK: define spir_kernel void @main()
; CHECK: = alloca <3 x double>
; CHECK: = alloca double
; CHECK: store <3 x double> {{<double (-?[0-9]+\.[0-9]+e\+[0-9]+|0x[0-9A-F]+), double (-?[0-9]+\.[0-9]+e\+[0-9]+|0x[0-9A-F]+), double (-?[0-9]+\.[0-9]+e\+[0-9]+|0x[0-9A-F]+)>|splat \(double -?[0x]*[0-9A-F.e+]+\)}}, ptr {{[%@].*}}
; CHECK: = load <3 x double>, ptr {{[%@].*}}
; CHECK: = extractelement <3 x double> {{[%@].*}}, i32 1
; CHECK: store double {{[%@].*}}, ptr {{[%@].*}}
; CHECK: ret void

// Copyright (C) Codeplay Software Limited
//
// Licensed under the Apache License, Version 2.0 (the "License") with LLVM
// Exceptions; you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://github.com/uxlfoundation/oneapi-construction-kit/blob/main/LICENSE.txt
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations
// under the License.
//
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

#ifndef UNITCL_CHECKS_H_INCLUDED
#define UNITCL_CHECKS_H_INCLUDED

#include <CL/cl.h>
#include <CL/cl_ext.h>

#include <string>

namespace ucl {
/// @brief Class to translate OpenCL error codes into readable output.
///
/// Class constructor takes int input and maps it to a description of the
/// associated OpenCL error code.
/// Class is used in test macros that build upon GTest macros.
/// Based on work by Benie.
///
struct Error {
  Error(cl_int error) : error(error) {}

  std::string description() const {
#define ERRCODE_RET_WRAPPER_CASE(ERRCODE) \
  case ERRCODE: {                         \
    return #ERRCODE;                      \
  } break

    switch (error) {
      ERRCODE_RET_WRAPPER_CASE(CL_SUCCESS);
      ERRCODE_RET_WRAPPER_CASE(CL_DEVICE_NOT_FOUND);
      ERRCODE_RET_WRAPPER_CASE(CL_DEVICE_NOT_AVAILABLE);
      ERRCODE_RET_WRAPPER_CASE(CL_COMPILER_NOT_AVAILABLE);
      ERRCODE_RET_WRAPPER_CASE(CL_MEM_OBJECT_ALLOCATION_FAILURE);
      ERRCODE_RET_WRAPPER_CASE(CL_OUT_OF_RESOURCES);
      ERRCODE_RET_WRAPPER_CASE(CL_OUT_OF_HOST_MEMORY);
      ERRCODE_RET_WRAPPER_CASE(CL_PROFILING_INFO_NOT_AVAILABLE);
      ERRCODE_RET_WRAPPER_CASE(CL_MEM_COPY_OVERLAP);
      ERRCODE_RET_WRAPPER_CASE(CL_IMAGE_FORMAT_MISMATCH);
      ERRCODE_RET_WRAPPER_CASE(CL_IMAGE_FORMAT_NOT_SUPPORTED);
      ERRCODE_RET_WRAPPER_CASE(CL_BUILD_PROGRAM_FAILURE);
      ERRCODE_RET_WRAPPER_CASE(CL_MAP_FAILURE);
      ERRCODE_RET_WRAPPER_CASE(CL_MISALIGNED_SUB_BUFFER_OFFSET);
      ERRCODE_RET_WRAPPER_CASE(CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST);
      ERRCODE_RET_WRAPPER_CASE(CL_COMPILE_PROGRAM_FAILURE);
      ERRCODE_RET_WRAPPER_CASE(CL_LINKER_NOT_AVAILABLE);
      ERRCODE_RET_WRAPPER_CASE(CL_LINK_PROGRAM_FAILURE);
      ERRCODE_RET_WRAPPER_CASE(CL_DEVICE_PARTITION_FAILED);
      ERRCODE_RET_WRAPPER_CASE(CL_KERNEL_ARG_INFO_NOT_AVAILABLE);

      ERRCODE_RET_WRAPPER_CASE(CL_INVALID_VALUE);
      ERRCODE_RET_WRAPPER_CASE(CL_INVALID_DEVICE_TYPE);
      ERRCODE_RET_WRAPPER_CASE(CL_INVALID_PLATFORM);
      ERRCODE_RET_WRAPPER_CASE(CL_INVALID_DEVICE);
      ERRCODE_RET_WRAPPER_CASE(CL_INVALID_CONTEXT);
      ERRCODE_RET_WRAPPER_CASE(CL_INVALID_QUEUE_PROPERTIES);
      ERRCODE_RET_WRAPPER_CASE(CL_INVALID_COMMAND_QUEUE);
      ERRCODE_RET_WRAPPER_CASE(CL_INVALID_HOST_PTR);
      ERRCODE_RET_WRAPPER_CASE(CL_INVALID_MEM_OBJECT);
      ERRCODE_RET_WRAPPER_CASE(CL_INVALID_IMAGE_FORMAT_DESCRIPTOR);
      ERRCODE_RET_WRAPPER_CASE(CL_INVALID_IMAGE_SIZE);
      ERRCODE_RET_WRAPPER_CASE(CL_INVALID_SAMPLER);
      ERRCODE_RET_WRAPPER_CASE(CL_INVALID_BINARY);
      ERRCODE_RET_WRAPPER_CASE(CL_INVALID_BUILD_OPTIONS);
      ERRCODE_RET_WRAPPER_CASE(CL_INVALID_PROGRAM);
      ERRCODE_RET_WRAPPER_CASE(CL_INVALID_PROGRAM_EXECUTABLE);
      ERRCODE_RET_WRAPPER_CASE(CL_INVALID_KERNEL_NAME);
      ERRCODE_RET_WRAPPER_CASE(CL_INVALID_KERNEL_DEFINITION);
      ERRCODE_RET_WRAPPER_CASE(CL_INVALID_KERNEL);
      ERRCODE_RET_WRAPPER_CASE(CL_INVALID_ARG_INDEX);
      ERRCODE_RET_WRAPPER_CASE(CL_INVALID_ARG_VALUE);
      ERRCODE_RET_WRAPPER_CASE(CL_INVALID_ARG_SIZE);
      ERRCODE_RET_WRAPPER_CASE(CL_INVALID_KERNEL_ARGS);
      ERRCODE_RET_WRAPPER_CASE(CL_INVALID_WORK_DIMENSION);
      ERRCODE_RET_WRAPPER_CASE(CL_INVALID_WORK_GROUP_SIZE);
      ERRCODE_RET_WRAPPER_CASE(CL_INVALID_WORK_ITEM_SIZE);
      ERRCODE_RET_WRAPPER_CASE(CL_INVALID_GLOBAL_OFFSET);
      ERRCODE_RET_WRAPPER_CASE(CL_INVALID_EVENT_WAIT_LIST);
      ERRCODE_RET_WRAPPER_CASE(CL_INVALID_EVENT);
      ERRCODE_RET_WRAPPER_CASE(CL_INVALID_OPERATION);
      ERRCODE_RET_WRAPPER_CASE(CL_INVALID_GL_OBJECT);
      ERRCODE_RET_WRAPPER_CASE(CL_INVALID_BUFFER_SIZE);
      ERRCODE_RET_WRAPPER_CASE(CL_INVALID_MIP_LEVEL);
      ERRCODE_RET_WRAPPER_CASE(CL_INVALID_GLOBAL_WORK_SIZE);
      ERRCODE_RET_WRAPPER_CASE(CL_INVALID_PROPERTY);
      ERRCODE_RET_WRAPPER_CASE(CL_INVALID_IMAGE_DESCRIPTOR);
      ERRCODE_RET_WRAPPER_CASE(CL_INVALID_COMPILER_OPTIONS);
      ERRCODE_RET_WRAPPER_CASE(CL_INVALID_LINKER_OPTIONS);
      ERRCODE_RET_WRAPPER_CASE(CL_INVALID_DEVICE_PARTITION_COUNT);
      ERRCODE_RET_WRAPPER_CASE(CL_PLATFORM_NOT_FOUND_KHR);

      ERRCODE_RET_WRAPPER_CASE(CL_INVALID_COMMAND_BUFFER_KHR);
      ERRCODE_RET_WRAPPER_CASE(CL_INCOMPATIBLE_COMMAND_QUEUE_KHR);
      ERRCODE_RET_WRAPPER_CASE(CL_INVALID_SYNC_POINT_WAIT_LIST_KHR);
      ERRCODE_RET_WRAPPER_CASE(CL_INVALID_MUTABLE_COMMAND_KHR);
      default: {
        return "Unknown error code: " + std::to_string(error);
      } break;
    }

#undef ERRCODE_RET_WRAPPER_CASE
  }

  bool operator==(const Error &other) const { return error == other.error; }

  cl_int error;
};

inline std::ostream &operator<<(std::ostream &os, const Error &error) {
  return os << error.description();
}
}  // namespace ucl

#ifndef ASSERT_EQ_ERRCODE
#define ASSERT_EQ_ERRCODE(val1, val2) \
  ASSERT_EQ(ucl::Error(val1), ucl::Error(val2))
#endif

#ifndef EXPECT_EQ_ERRCODE
#define EXPECT_EQ_ERRCODE(val1, val2) \
  EXPECT_EQ(ucl::Error(val1), ucl::Error(val2))
#endif

#ifndef ASSERT_SUCCESS
#define ASSERT_SUCCESS(ACTUAL) ASSERT_EQ_ERRCODE(CL_SUCCESS, ACTUAL)
#endif

#ifndef EXPECT_SUCCESS
#define EXPECT_SUCCESS(ACTUAL) EXPECT_EQ_ERRCODE(CL_SUCCESS, ACTUAL)
#endif

#endif  // UNITCL_CHECKS_H_INCLUDED
